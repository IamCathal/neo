// Code generated by mockery v2.9.4. DO NOT EDIT.

package controller

import (
	context "context"

	common "github.com/neosteamfriendgraphing/common"

	datastructures "github.com/IamCathal/neo/services/datastore/datastructures"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockCntrInterface is an autogenerated mock type for the MockCntrInterface type
type MockCntrInterface struct {
	mock.Mock
}

// DoesProcessedGraphDataExist provides a mock function with given fields: crawlID
func (_m *MockCntrInterface) DoesProcessedGraphDataExist(crawlID string) (bool, error) {
	ret := _m.Called(crawlID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(crawlID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(crawlID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrawlingStatusFromDBFromCrawlID provides a mock function with given fields: ctx, crawlID
func (_m *MockCntrInterface) GetCrawlingStatusFromDBFromCrawlID(ctx context.Context, crawlID string) (common.CrawlingStatus, error) {
	ret := _m.Called(ctx, crawlID)

	var r0 common.CrawlingStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) common.CrawlingStatus); ok {
		r0 = rf(ctx, crawlID)
	} else {
		r0 = ret.Get(0).(common.CrawlingStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, crawlID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailsForGames provides a mock function with given fields: ctx, IDList
func (_m *MockCntrInterface) GetDetailsForGames(ctx context.Context, IDList []int) ([]common.BareGameInfo, error) {
	ret := _m.Called(ctx, IDList)

	var r0 []common.BareGameInfo
	if rf, ok := ret.Get(0).(func(context.Context, []int) []common.BareGameInfo); ok {
		r0 = rf(ctx, IDList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BareGameInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, IDList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessedGraphData provides a mock function with given fields: crawlID
func (_m *MockCntrInterface) GetProcessedGraphData(crawlID string) (common.UsersGraphData, error) {
	ret := _m.Called(crawlID)

	var r0 common.UsersGraphData
	if rf, ok := ret.Get(0).(func(string) common.UsersGraphData); ok {
		r0 = rf(crawlID)
	} else {
		r0 = ret.Get(0).(common.UsersGraphData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(crawlID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortestDistanceInfo provides a mock function with given fields: ctx, crawlIDs
func (_m *MockCntrInterface) GetShortestDistanceInfo(ctx context.Context, crawlIDs []string) (bool, datastructures.ShortestDistanceInfo, error) {
	ret := _m.Called(ctx, crawlIDs)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []string) bool); ok {
		r0 = rf(ctx, crawlIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 datastructures.ShortestDistanceInfo
	if rf, ok := ret.Get(1).(func(context.Context, []string) datastructures.ShortestDistanceInfo); ok {
		r1 = rf(ctx, crawlIDs)
	} else {
		r1 = ret.Get(1).(datastructures.ShortestDistanceInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = rf(ctx, crawlIDs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: ctx, steamID
func (_m *MockCntrInterface) GetUser(ctx context.Context, steamID string) (common.UserDocument, error) {
	ret := _m.Called(ctx, steamID)

	var r0 common.UserDocument
	if rf, ok := ret.Get(0).(func(context.Context, string) common.UserDocument); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Get(0).(common.UserDocument)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsernames provides a mock function with given fields: ctx, steamIDs
func (_m *MockCntrInterface) GetUsernames(ctx context.Context, steamIDs []string) (map[string]string, error) {
	ret := _m.Called(ctx, steamIDs)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]string); ok {
		r0 = rf(ctx, steamIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, steamIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserBeenCrawledBeforeAtLevel provides a mock function with given fields: ctx, level, steamID
func (_m *MockCntrInterface) HasUserBeenCrawledBeforeAtLevel(ctx context.Context, level int, steamID string) (string, error) {
	ret := _m.Called(ctx, level, steamID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int, string) string); ok {
		r0 = rf(ctx, level, steamID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, level, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertGame provides a mock function with given fields: ctx, game
func (_m *MockCntrInterface) InsertGame(ctx context.Context, game common.BareGameInfo) (bool, error) {
	ret := _m.Called(ctx, game)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, common.BareGameInfo) bool); ok {
		r0 = rf(ctx, game)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.BareGameInfo) error); ok {
		r1 = rf(ctx, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, collection, bson
func (_m *MockCntrInterface) InsertOne(ctx context.Context, collection *mongo.Collection, bson []byte) (*mongo.InsertOneResult, error) {
	ret := _m.Called(ctx, collection, bson)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(context.Context, *mongo.Collection, []byte) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, collection, bson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mongo.Collection, []byte) error); ok {
		r1 = rf(ctx, collection, bson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveProcessedGraphData provides a mock function with given fields: crawlID, graphData
func (_m *MockCntrInterface) SaveProcessedGraphData(crawlID string, graphData common.UsersGraphData) (bool, error) {
	ret := _m.Called(crawlID, graphData)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, common.UsersGraphData) bool); ok {
		r0 = rf(crawlID, graphData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, common.UsersGraphData) error); ok {
		r1 = rf(crawlID, graphData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveShortestDistance provides a mock function with given fields: ctx, shortestDistanceInfo
func (_m *MockCntrInterface) SaveShortestDistance(ctx context.Context, shortestDistanceInfo datastructures.ShortestDistanceInfo) (bool, error) {
	ret := _m.Called(ctx, shortestDistanceInfo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, datastructures.ShortestDistanceInfo) bool); ok {
		r0 = rf(ctx, shortestDistanceInfo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastructures.ShortestDistanceInfo) error); ok {
		r1 = rf(ctx, shortestDistanceInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCrawlingStatus provides a mock function with given fields: ctx, collection, crawlingStatus
func (_m *MockCntrInterface) UpdateCrawlingStatus(ctx context.Context, collection *mongo.Collection, crawlingStatus common.CrawlingStatus) (bool, error) {
	ret := _m.Called(ctx, collection, crawlingStatus)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *mongo.Collection, common.CrawlingStatus) bool); ok {
		r0 = rf(ctx, collection, crawlingStatus)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mongo.Collection, common.CrawlingStatus) error); ok {
		r1 = rf(ctx, collection, crawlingStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
