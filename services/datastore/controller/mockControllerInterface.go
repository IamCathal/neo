// Code generated by mockery v2.9.4. DO NOT EDIT.

package controller

import (
	context "context"

	common "github.com/neosteamfriendgraphing/common"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// CntrInterface is an autogenerated mock type for the CntrInterface type
type MockCntrInterface struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: ctx, steamID
func (_m *MockCntrInterface) GetUser(ctx context.Context, steamID string) (common.UserDocument, error) {
	ret := _m.Called(ctx, steamID)

	var r0 common.UserDocument
	if rf, ok := ret.Get(0).(func(context.Context, string) common.UserDocument); ok {
		r0 = rf(ctx, steamID)
	} else {
		r0 = ret.Get(0).(common.UserDocument)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, collection, bson
func (_m *MockCntrInterface) InsertOne(ctx context.Context, collection *mongo.Collection, bson []byte) (*mongo.InsertOneResult, error) {
	ret := _m.Called(ctx, collection, bson)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(context.Context, *mongo.Collection, []byte) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, collection, bson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mongo.Collection, []byte) error); ok {
		r1 = rf(ctx, collection, bson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCrawlingStatus provides a mock function with given fields: ctx, collection, crawlingStatus
func (_m *MockCntrInterface) UpdateCrawlingStatus(ctx context.Context, collection *mongo.Collection, crawlingStatus common.CrawlingStatus) (bool, error) {
	ret := _m.Called(ctx, collection, crawlingStatus)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *mongo.Collection, common.CrawlingStatus) bool); ok {
		r0 = rf(ctx, collection, crawlingStatus)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mongo.Collection, common.CrawlingStatus) error); ok {
		r1 = rf(ctx, collection, crawlingStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
